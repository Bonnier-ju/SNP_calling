#!/bin/bash
#SBATCH -p workq
#SBATCH --time=01:00:00 #job time limit
#SBATCH -J CV-haplotype_call #job name
#SBATCH -o /work/user/jbonnier/Dicorynia/test_subsamples/batch_test/output_files/output-%x-%j.out #output file name
#SBATCH -e /work/user/jbonnier/Dicorynia/test_subsamples/batch_test/error_files/error-%x-%j.out #error file name
#SBATCH --mem=20G #memory reservation
#SBATCH --cpus-per-task=4 #ncpu on the same node
#SBATCH --mail-user=julien.bonnier@ecofog.gf 
#SBATCH --mail-type=END,FAIL


######## Variant calling ########

#`GATK` (Genome Analysis ToolKit) properly pronounced "Gee-ay-tee-kay" (/dʒi•eɪ•ti•keɪ/) and not "Gat-kay" (/ɡæt•keɪ/) 
# has apparently similar performance to other variant callers. 
# 3 steps (following Sylvain Schmitt "Symcapture") 
# 1. Variant calling__ Run the `HaplotypeCaller` on each sample's BAM files to create single-sample gVCFs using the `.g.vcf` extension for the output file.
# 2. Data aggregation__ Aggregate the GVCF files and feed in one GVCF with `GenomicsDBImport` to be genotyped
# 3. Joint genotyping__ Run `GenotypeGVCFs` on all of them together to create the raw SNP and indel VCFs that are usually emitted by the callers.


#Clean work place 

module purge 

#Loading modules 

module load devel/python/Python-3.11.1 devel/java/17.0.6
module load bioinfo/GATK/4.2.6.1


###Data aggregation with GenomicsDBImport ###
#GVCFs are consolidated into a GenomicsDB datastore in order to improve scalability and speedup the next step: joint genotyping.
#We normally recommend running jobs with 70%-80% efficiency. Based on the efficiency calculated GenomicsDBImport should be run with no more than 2 threads.
#As for memory, increasing memory didn’t improve performance (best 6G, following graph from nih.gov)



###Create sample map### 

# Path to gvcf files 
GVCF_PATH="/work/user/jbonnier/Dicorynia/test_subsamples/variants_calling/haplocall_gvcf/"
MAP_DIR="/work/user/jbonnier/Dicorynia/test_subsamples/variants_calling/data_aggregation/"

# Création d'un fichier de mappage échantillon vide
touch "${MAP_DIR}sample_map.txt"

# Boucle pour parcourir tous les fichiers GVCF dans le chemin spécifié
for file in ${GVCF_PATH}*.g.vcf.gz; do 
   # Extraction du nom de base du fichier et écriture dans le fichier de mappage
   echo -e $(basename "${file%.*}")"\t"${file} >> "${MAP_DIR}sample_map.txt"
done


#### attention si la boucle est relancer deux fois d'affilé, elle réécris une deuxième fois les infos 